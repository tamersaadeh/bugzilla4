#!/bin/sh

# summary of how this script can be called:
#  * <prerm> `remove'
#  * <old-prerm> `upgrade' <new-version>
#  * <new-prerm> `failed-upgrade' <old-version>
#  * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#  * <deconfigured's-prerm> `deconfigure' `in-favour' <package-being-installed> <version> `removing' <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html

set -e
mode="$1"
version="$2"

# Debconf is needed here
. /usr/share/debconf/confmodule

# A copy of this function is the following scripts:
# * bugzilla3.{pre,post}{inst,rm}
# * bugzilla3.config
start_dbc()
{
    local _class="$1"
    local _mode="$2"
    local _version="$3"
    # The preinst stage is not supported by dbconfig-common and result
    # in an error message. We skip this call to supress the error output.
    if [ "$_class" = "preinst" ]; then
        return 0
    # If dbconfig-common and bugzilla3 are installed first time
    # these file is not avaialabe at config stage.
    elif [ -f /usr/share/dbconfig-common/dpkg/${_class}.mysql ]; then
        . /usr/share/dbconfig-common/dpkg/${_class}.mysql
        dbc_go bugzilla3 $_mode $_version
        case $_class in
        config|postinst)
            if [ "$_version" ]; then
                [ "$dbc_upgrade" = "true" ] \
                || return 1
            else
                [ "$dbc_install" = "true" ] \
                || return 1
            fi
            ;;
        prerm|postrm)
            [ "$dbc_remove" = "true" ] \
            || return 1
            ;;
        esac
    # For all other stages then config it's a error if the file is missing.
    elif [ "$_class" != "config" ]; then
        return 1;
    fi
}

# Make sure it's the same in
# + debian/rules
# + maintenance/checksetup_debian.sh
# + debian/bugzilla3.{pre,post}{inst,rm}
std_exports()
{
    export BUGZILLA_ETCDIR="/etc/bugzilla3"
    export BUGZILLA_VARDIR="/var/lib/bugzilla3"
    export BUGZILLA_DATADIR="$BUGZILLA_VARDIR/data"
    export BUGZILLA_SHAREDIR="/usr/share/bugzilla3"
    export BUGZILLA_WEBDIR="$BUGZILLA_SHAREDIR/web"
    export BUGZILLA_CONTRIBDIR="$BUGZILLA_SHAREDIR/contrib"
    export BUGZILLA_TEMPLATEDIR="$BUGZILLA_VARDIR/template"
    export BUGZILLA_COMPILEDTEMPLATEDIR="$BUGZILLA_DATADIR/template"
    export BUGZILLA_EXTENSIONSDIR="$BUGZILLA_VARDIR/extensions"
}
std_exports
start_dbc prerm $* || true

if [ "$mode" = "remove" ]; then
	f="/etc/apache2/conf.d/bugzilla3"
	# Remove default apache2 CGI configuration.
	if [ -e "/usr/share/doc/bugzilla3/examples/basic.conf" -a -e "$f" ] && cmp -s "/usr/share/doc/bugzilla3/examples/basic.conf" "$f" && test -L "$f"; then
		rm -f "$f"
	fi

	# Remove default files which were installed by checksetup.pl.
	for d in `find $BUGZILLA_WEBDIR/skins/ -mindepth 1 -name "index.css" -printf "%h\n"`; do
		[ "$d" = "$BUGZILLA_WEBDIR/skins/standard" ] \
		&& continue
		for f in `find $d/ -mindepth 1 -type f -printf "%f\n"`; do
			if cmp -s "$BUGZILLA_WEBDIR/skins/standard/$f" "$d/$f"; then
				# Remove auto generated file.
				rm "$d/$f"
			fi
		done
		# Assume this directory is empty. If not, the administrator changed something and
		# the directory is kept as it is.
		rm $d/yui 2>/dev/null \
		&& rm -r $d 2>/dev/null \
		|| true
	done
fi

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#
