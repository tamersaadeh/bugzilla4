#!/bin/sh

# debconf-devel(7) -- summary of how this script can be called:
# * <config> `configure` <most-recently-configured-version>
#   - If a package is pre-configured, with dpkg-preconfigure, its config script is run.
#   - When a package's postinst is run, debconf will try to run the config script then
#     too, and it will be passed the same parameters it was passed when it is
#     pre-configured. This is necessary because the package might not have been
#     pre-configured, and the config script still needs to get a chance to run.
# * <config> `reconfigure` <installed-version>
#   - If a package is reconfigured, with dpkg-reconfigure, its config script it run.


# Source debconf library.
. /usr/share/debconf/confmodule

# Establish the preliminaries.
db_version 2.0
db_capb backup

set -e

mode="$1"
version="$2"

# Ask the user for the message which should be used
# if Bugzilla is disabled first.
db_input medium bugzilla3/shutdownhtml || true
db_go || true

# A copy of this function is the following scripts:
# * bugzilla3.{pre,post}{inst,rm}
# * bugzilla3.config
start_dbc()
{
    local _class="$1"
    local _mode="$2"
    local _version="$3"
    # The preinst stage is not supported by dbconfig-common and result
    # in an error message. We skip this call to supress the error output.
    if [ "$_class" = "preinst" ]; then
        return 0
    # If dbconfig-common and bugzilla3 are installed first time
    # these file is not avaialabe at config stage.
    elif [ -f /usr/share/dbconfig-common/dpkg/${_class}.mysql ]; then
        . /usr/share/dbconfig-common/dpkg/${_class}.mysql
        dbc_go bugzilla3 $_mode $_version
        case $_class in
        config|postinst)
            if [ "$_version" ]; then
                [ "$dbc_upgrade" = "true" ] \
                || return 1
            else
                [ "$dbc_install" = "true" ] \
                || return 1
            fi
            ;;
        prerm|postrm)
            [ "$dbc_remove" = "true" ] \
            || return 1
            ;;
        esac
    # For all other stages then config it's a error if the file is missing.
    elif [ "$_class" != "config" ]; then
        return 1;
    fi
}

ask_again()
{
    for q in $*; do
        db_reset "$q"
        db_fset "$q" seen false
        db_input high "$q" || [ $? = 30 ]
        do_ask_again="yes"
    done
}

start_dbc config $* || true

# Is the password known
db_fget bugzilla3/bugzilla_admin_pwd seen
if [ "$RET" = "true" ]; then
    db_get bugzilla3/bugzilla_admin_pwd || [ $? = 30 ]
    db_set bugzilla3/pwd_check "$RET"
else
    db_set bugzilla3/pwd_check ""
fi

# If requested ask again
db_fget bugzilla3/customized_values_ask_again true
if [ "$RET" = "true" ]; then
    db_reset bugzilla3/customized_values
    db_reset bugzilla3/customized_values_ask_again
fi

# Prompt the user for values
db_beginblock
    # Ask the user how to deal with Status/Resolution changes, if any.
    db_input medium bugzilla3/customized_values || [ $? = 30 ]
    db_input medium bugzilla3/customized_values_ask_again || [ $? = 30 ]
    # Ask for Bugzilla's administrator account/password
    db_input high bugzilla3/bugzilla_admin_name || [ $? = 30 ]
    db_input high bugzilla3/bugzilla_admin_real_name || [ $? = 30 ]
    if db_input high bugzilla3/bugzilla_admin_pwd || [ ! "$?" = "30" ] ; then  
       db_input high bugzilla3/pwd_check || [ $? = 30 ]
    fi
db_endblock

# Refuse null or invalid values.
do_ask_again="yes"
while [ "$do_ask_again" = "yes" ]; do
    do_ask_again="no"
    db_go \
    || break

    db_beginblock
    for FIELD in bugzilla_admin_name bugzilla_admin_real_name shutdownhtml; do
        db_get bugzilla3/$FIELD || true
        if [ "$RET" = "" ]; then
            # None of these field should be empty
            ask_again "bugzilla3/$FIELD"
        fi
    done

    # Check if bugzilla_admin_name is a valid e-mail address.
    db_get bugzilla3/bugzilla_admin_name
    if ! echo "$RET" | grep -q "^[^[:space:]]\+@[^[:space:]]\+\.[^[:space:]]\+"; then
        ask_again "bugzilla3/bugzilla_admin_name"
    fi

    db_get bugzilla3/bugzilla_admin_pwd || true
    PWD="$RET"
    db_get bugzilla3/pwd_check || true
    # Check if retry is the same as the password, and
    # if the password is at least 3 characters in length.
    if [ "$RET" != "$PWD" ] || expr length "$PWD" \< 6 >/dev/null; then
        ask_again "bugzilla3/bugzilla_admin_pwd" "bugzilla3/pwd_check"
    fi
    db_endblock

    # Do not repeat if we are in non-interactive mode.
    if [ "$DEBIAN_FRONTEND" = "noninteractive" ]; then
        break
    fi
done

# vim:ts=4 et sw=4
