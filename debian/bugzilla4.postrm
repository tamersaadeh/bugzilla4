#!/bin/sh

# summary of how this script can be called:
#  * <postrm> `remove'
#  * <postrm> `purge'
#  * <old-postrm> `upgrade' <new-version>
#  * <new-postrm> `failed-upgrade' <old-version>
#  * <new-postrm> `abort-install'
#  * <new-postrm> `abort-install' <old-version>
#  * <new-postrm> `abort-upgrade' <old-version>
#  * <disappearer's-postrm> `disappear' <r>overwrit>r> <new-version>
# for details, see http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html

# Debconf is needed here
. /usr/share/debconf/confmodule

set -e
mode="$1"
version="$2"

# Make sure it's the same in
# + debian/rules
# + maintenance/checksetup_debian.sh
# + debian/bugzilla4.{pre,post}{inst,rm}
std_exports()
{
    export BUGZILLA_ETCDIR="/etc/bugzilla4"
    export BUGZILLA_VARDIR="/var/lib/bugzilla4"
    export BUGZILLA_DATADIR="$BUGZILLA_VARDIR/data"
    export BUGZILLA_SHAREDIR="/usr/share/bugzilla4"
    export BUGZILLA_WEBDIR="$BUGZILLA_SHAREDIR/web"
    export BUGZILLA_CONTRIBDIR="$BUGZILLA_SHAREDIR/contrib"
    export BUGZILLA_TEMPLATEDIR="$BUGZILLA_VARDIR/template"
    export BUGZILLA_COMPILEDTEMPLATEDIR="$BUGZILLA_DATADIR/template"
    export BUGZILLA_EXTENSIONSDIR="$BUGZILLA_VARDIR/extensions"
}

# A copy of this function is the following scripts:
# * bugzilla4.{pre,post}{inst,rm}
# * bugzilla4.config
start_dbc()
{
    local _class="$1"
    local _mode="$2"
    local _version="$3"
    # The preinst stage is not supported by dbconfig-common and result
    # in an error message. We skip this call to supress the error output.
    if [ "$_class" = "preinst" ]; then
        return 0
    # If dbconfig-common and bugzilla4 are installed first time
    # these file is not avaialabe at config stage.
    elif [ -f /usr/share/dbconfig-common/dpkg/${_class}.mysql ]; then
        . /usr/share/dbconfig-common/dpkg/${_class}.mysql
        dbc_go bugzilla4 $_mode $_version
        case $_class in
        config|postinst)
            if [ "$_version" ]; then
                [ "$dbc_upgrade" = "true" ] \
                || return 1
            else
                [ "$dbc_install" = "true" ] \
                || return 1
            fi
            ;;
        prerm|postrm)
            [ "$dbc_remove" = "true" ] \
            || return 1
            ;;
        esac
    # For all other stages then config it's a error if the file is missing.
    elif [ "$_class" != "config" ]; then
        return 1;
    fi
}

std_exports
start_dbc postrm $* || true

case "$mode" in
    purge)
        for f in "$BUGZILLA_ETCDIR/params" "$BUGZILLA_ETCDIR/localconfig"; do
            ucf --purge "$f"
            rm -f "$f"
        done
        rm -rf "$BUGZILLA_ETCDIR"/*.ucf-old "$BUGZILLA_ETCDIR"/*.ucf-dist
        rm -rf "$BUGZILLA_VARDIR"
        # Forget all dpkg-statoverride entries for bugzilla4
        for f in `dpkg-statoverride --list "*/bugzilla4*" 2>/dev/null | cut -d ' ' -f 4`; do
            dpkg-statoverride --remove "$f"
        done
    ;;

    remove|upgrade|disappear|abort-install|abort-upgrade|failed-upgrade)
        # Remove precompiled templates
        rm -rf "$BUGZILLA_COMPILEDTEMPLATEDIR"/*
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 0
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# vim:ts=4 et sw=4
